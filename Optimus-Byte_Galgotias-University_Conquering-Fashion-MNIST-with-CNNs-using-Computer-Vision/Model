def build_model(hp):
  model = keras.Sequential([
                            keras.layers.Conv2D(filters=hp.Int("conv_1_filter", min_value = 32, max_value = 128, step = 16), 
                                                kernel_size=hp.Choice("conv_1_kernel", values = [3,5]), 
                                                activation='relu', 
                                                input_shape=(28, 28, 1)
                                                ),
                            keras.layers.Conv2D(filters=hp.Int("conv_2_filter", min_value = 32, max_value = 64, step = 16), 
                                                kernel_size=hp.Choice("conv_2_kernel", values = [3,5]), 
                                                activation='relu', 
                                                input_shape=(28, 28, 1)
                                                ),
                            keras.layers.Flatten(),
                            keras.layers.Dense(
                                units = hp.Int("dense_1_units", min_value = 32, max_value = 128, step = 16),
                                activation = 'relu'
                            ),
                            keras.layers.Dense(10, activation='softmax') #output_layer                            
                            
  ])
  model.compile(optimizer = keras.optimizers.Adam(hp.Choice('learning_rate', values = [1e-2,1e-3])),
                loss = 'sparse_categorical_crossentropy',
                metrics = ['accuracy'])
  return model
